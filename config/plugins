" vim: filetype=vim

function! BuildYCM(info)
" Run install.py for YCM if first install
  if a:info.status == 'installed' || a:info.force
    !./install.py\ --clang-completer
  endif
endfunction

" Plugin manager
call plug#begin('~/.vim/bundle')

Plug 'Raimondi/delimitMate'
" Automatic closing of quotes, parenthesis, brackets, etc., 
let g:delimitMate_expand_cr=1
let g:delimitMate_expand_space=1

Plug 'Valloric/ListToggle'
" Plugin for toggling the display of the quickfix list and the location-list

Plug 'Valloric/YouCompleteMe',{ 'do': function('BuildYCM') }
" Code-completion engine for Vim
let g:ycm_global_ycm_extra_conf = '~/.vim/config/ycm/ycm_extra_conf.py'
let g:ycm_autoclose_preview_window_after_insertion=1
let g:ycm_filetype_blacklist = {}
let g:ycm_path_to_python_interpreter = '/usr/bin/python'
  let g:ycm_server_python_interpreter = '/usr/bin/python'  
let g:ycm_always_populate_location_list = 1
nnoremap <leader>g :YcmCompleter GoTo<CR>
set omnifunc=syntaxcomplete#Complete
let g:ycm_seed_identifiers_with_syntax = 1
let g:ycm_error_symbol = ''
let g:ycm_warning_symbol = ''

Plug 'Yggdroot/indentLine'
" Displays thin vertical lines at each indentation level
let g:indentLine_char = '│'
" More settings in filetype (disabled with latex)

Plug 'easymotion/vim-easymotion'
" Vim motion on speed!

Plug 'SirVer/ultisnips'
" The ultimate solution for snippets in Vim
let g:UltiSnipsUsePythonVersion = 3
" More UltiSnips confiuration in mappings section

Plug 'honza/vim-snippets'
" Snippets files for various programming languages.

Plug 'majutsushi/tagbar'
" Vim plugin that displays tags in a window, ordered by scope

Plug 'mattn/emmet-vim'
" Provides support for expanding abbreviations similar to emmet
let g:user_emmet_install_global = 0
autocmd FileType html,css,php EmmetInstall

Plug 'scrooloose/nerdcommenter'
" Vim plugin for intensely orgasmic commenting

Plug 'scrooloose/nerdtree'
" A tree explorer plugin for vim.

Plug 'Xuyuanp/nerdtree-git-plugin'
" A plugin of NERDTree showing git status

Plug 'tmhedberg/matchit'

Plug 'tpope/vim-ragtag'
" A set of mappings for HTML, XML, PHP, ASP, eRuby, JSP ...

Plug 'tpope/vim-repeat'
" Remaps . in a way that plugins can tap into it.

Plug 'tpope/vim-surround'
" Mappings to easily delete, change and add such surroundings in pairs.

Plug 'tpope/vim-fugitive'
" Git wrapper

Plug 'vim-airline/vim-airline'
" Lean & mean status/tabline for vim that's light as air.
let g:airline#extensions#tabline#enabled=1
let g:airline_powerline_fonts = 1

Plug 'LaTeX-Box-Team/LaTeX-Box'
" Lightweight Toolbox for LaTeX

Plug 'vim-utils/vim-man'      
" View man pages in vim. Grep for the man pages.

Plug 'KabbAmine/zeavim.vim'   
" Zeal for vim

Plug 'sjl/gundo.vim'  
" Visualize your undo tree

Plug 'arecarn/vim-crunch' 
" Looser math syntax in = register and command g==

Plug 'christoomey/vim-tmux-navigator'
" Seamless navigation between tmux panes and vim splits

Plug 'ryanoasis/vim-devicons'
" Adds file type glyphs/icons to many popular Vim plugins

Plug 'mhinz/vim-startify'
" The fancy start screen for Vim.

Plug 'rhysd/vim-grammarous'
" A powerful grammar checker for Vim using LanguageTool.
let g:grammarous#use_vim_spelllang=1

Plug 'Shougo/denite.nvim',{'do':':UpdateRemotePlugins'}
" Dark powered asynchronous unite all interfaces for Neovim/Vim8
" Config after call plug#end()

Plug 'Shougo/neomru.vim'
" MRU plugin includes unite.vim MRU sources

" NVIM only

Plug 'neomake/neomake'

call plug#end()

" CUSTOM Denite menus
" Add custom menus
let s:menus = {}

let s:menus.denite = {
    \ 'description': 'Defined denite menus'
    \}
let s:menus.denite.command_candidates = [
    \ ['git commands       (Fugitive)', 'Denite menu:git']
    \ ]

let s:menus.ycm = {
    \ 'description' : 'Ycm commands'
    \ }

let s:menus.ycm.command_candidates = [
    \ ['Go to                                                          ,g ', 'YcmCompleter GoTo'],
    \ ['Fix it                                                         ,fx', 'YcmCompleter FixIt'],
    \ ['Diags                                                          ,d ', 'YcmDiags'],
    \ ['Force compile and diagnostics                                  ,fc', 'YcmForceCompileAndDiagnostics'],
    \ ['Show detailed diagnostic                                       ,sd', 'YcmShowDetailedDiagnostic'],
    \ ['Restart server                                                 ,rs', 'YcmRestartServer'],
    \ ['Go to declaration                                              ,gd', 'YcmCompleter GoToDeclaration'],
    \ ['Go to definition                                               ,gD', 'YcmCompleter GoToDefinition'],
    \ ['Go to imprecise                                                ,gI', 'YcmCompleter GoToImprecise'],
    \ ['Go to include                                                  ,gi', 'YcmCompleter GoToInclude'],
    \ ['Clear compilation flag cache                                   ,cc', 'YcmCompleter ClearCompilationFlagCache'],
    \ ['Get type                                                       ,Gt', 'YcmCompleter GetType'],
    \ ['Get type imprecise                                             ,GT', 'YcmCompleter GetTypeImprecise'],
    \ ['Get parent                                                     ,Gp', 'YcmCompleter GetParent'],
    \ ['Get doc                                                        ,Gd', 'YcmCompleter GetDoc'],
    \ ['Debug info                                                     ,di', 'YcmDebugInfo'],
    \ ['Toggle logs                                                    ,tl', 'YcmToggleLogs'],
    \ ['YcmCompleter                                                   ,yc', 'exe "YcmCompleter " input("Ycm command: ")'],
    \ ]

let s:menus.git = {
    \ 'description' : 'Git fugitive commands'
    \ }

let s:menus.git.command_candidates = [
    \ [' git status       (Fugitive)                                 ,gs', 'Gstatus'],
    \ [' git diff         (Fugitive)                                 ,gd', 'Gdiff'],
    \ [' git commit       (Fugitive)                                 ,gc', 'Gcommit'],
    \ [' git log          (Fugitive)                                 ,gl', 'exe "silent Glog | Unite quickfix"'],
    \ [' git blame        (Fugitive)                                 ,gb', 'Gblame'],
    \ [' git stage        (Fugitive)                                 ,gw', 'Gwrite'],
    \ [' git checkout     (Fugitive)                                 ,go', 'Gread'],
    \ [' git rm           (Fugitive)                                 ,gr', 'Gremove'],
    \ [' git mv           (Fugitive)                                 ,gm', 'exe "Gmove " input("destination: ")'],
    \ [' git push         (Fugitive, buffer output)                  ,gp', 'Git! push'],
    \ [' git pull         (Fugitive, buffer output)                  ,gP', 'Git! pull'],
    \ [' git prompt       (Fugitive, buffer output)                  ,gi', 'exe "Git! " input("git command: ")'],
    \ [' git cd           (Fugitive)                                 ,gC', 'Gcd'],
    \ ]

call denite#custom#var('menu', 'menus', s:menus)
